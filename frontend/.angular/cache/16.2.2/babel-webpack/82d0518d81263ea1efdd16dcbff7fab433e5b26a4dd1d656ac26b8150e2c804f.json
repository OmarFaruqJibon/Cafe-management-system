{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UntypedFormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { globalConstant } from 'src/app/shared/global-constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/category.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"src/app/services/snackbar.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/toolbar\";\nfunction CategoryComponent_mat_error_12_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CategoryComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, CategoryComponent_mat_error_12_span_1_Template, 2, 0, \"span\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.categoryForm.controls.name.errors.required);\n  }\n}\nexport let CategoryComponent = /*#__PURE__*/(() => {\n  var _class;\n  class CategoryComponent {\n    constructor(dialogData, fb, categoryService, dialogRef, snackBar) {\n      this.dialogData = dialogData;\n      this.fb = fb;\n      this.categoryService = categoryService;\n      this.dialogRef = dialogRef;\n      this.snackBar = snackBar;\n      this.onAddCategory = new EventEmitter();\n      this.onEditCategory = new EventEmitter();\n      this.categoryForm = UntypedFormGroup;\n      this.dialogAction = 'Add';\n      this.action = 'Add';\n    }\n    ngOnInit() {\n      this.categoryForm = this.fb.group({\n        name: [null, [Validators.required]]\n      });\n      if (this.dialogData.action === 'Edit') {\n        this.dialogAction = 'Edit';\n        this.action = 'Update';\n        this.categoryForm.patchValue(this.dialogData.data);\n      }\n    }\n    handleSubmit() {\n      if (this.dialogAction === 'Edit') {\n        this.edit();\n      } else {\n        this.add();\n      }\n    }\n    add() {\n      let formData = this.categoryForm.value;\n      let data = {\n        name: formData.name\n      };\n      this.categoryService.addCategory(data).subscribe(resp => {\n        this.dialogRef.close();\n        this.onAddCategory.emit();\n        this.responseMessage = resp.message;\n        this.snackBar.openSnackBar(this.responseMessage, 'Success');\n      }, error => {\n        this.dialogRef.close();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = globalConstant.generelError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, globalConstant.error);\n      });\n    }\n    edit() {\n      let formData = this.categoryForm.value;\n      let data = {\n        id: this.dialogData.data.id,\n        name: formData.name\n      };\n      this.categoryService.updateCategory(data).subscribe(resp => {\n        this.dialogRef.close();\n        this.onEditCategory.emit();\n        this.responseMessage = resp.message;\n        this.snackBar.openSnackBar(this.responseMessage, 'Success');\n      }, error => {\n        this.dialogRef.close();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = globalConstant.generelError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, globalConstant.error);\n      });\n    }\n  }\n  _class = CategoryComponent;\n  _class.ɵfac = function CategoryComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i4.SnackbarService));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-category\"]],\n    decls: 18,\n    vars: 5,\n    consts: [[\"color\", \"primary\"], [\"fxLayout\", \"row\"], [1, \"title-center\"], [1, \"mat-typography\"], [3, \"formGroup\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\"], [\"fxLayout\", \"row wrap\"], [\"appearance\", \"fill\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"name\", \"required\", \"\"], [4, \"ngIf\"], [\"align\", \"center\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"mat-dialog-close\", \"\"]],\n    template: function CategoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"mat-toolbar-row\", 1)(2, \"span\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"mat-dialog-content\", 3)(5, \"form\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"mat-form-field\", 7)(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵtemplate(12, CategoryComponent_mat_error_12_Template, 2, 1, \"mat-error\", 9);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(13, \"mat-dialog-actions\", 10)(14, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function CategoryComponent_Template_button_click_14_listener() {\n          return ctx.handleSubmit();\n        });\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 12);\n        i0.ɵɵtext(17, \" Close \");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.dialogData.action, \" Category\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.categoryForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.categoryForm.controls.name.touched && ctx.categoryForm.controls.name.invalid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !(ctx.categoryForm.valid && ctx.categoryForm.dirty));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.action, \" \");\n      }\n    },\n    dependencies: [i5.NgIf, i6.MatButton, i3.MatDialogClose, i3.MatDialogContent, i3.MatDialogActions, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput, i9.MatToolbar, i9.MatToolbarRow, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName]\n  });\n  return CategoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}